#BlueJ class context
comment0.target=Parser
comment0.text=\r\n\ Parser\ fournit\ une\ m\u00E9thode\ simple\ pour\ analyser\ les\ entr\u00E9es\ utilisateur\ et\ renvoyer\ des\ objets\ Command\ correspondants.\r\n
comment1.params=
comment1.target=Parser()
comment1.text=\r\n\ Le\ constructeur\ de\ la\ classe\ Parser\ initialise\ un\ objet\ CommandWords,\ qui\ contient\ une\ liste\ de\ commandes\ valides.\r\n
comment2.params=pInputLine
comment2.target=Command\ getCommand(java.lang.String)
comment2.text=\r\n\ Cette\ m\u00E9thode\ prend\ une\ ligne\ d'entr\u00E9e\ en\ tant\ que\ param\u00E8tre\ et\ la\ divise\ en\ deux\ parties.\r\n\ La\ premi\u00E8re\ partie\ est\ la\ commande\ et\ la\ deuxi\u00E8me\ partie\ est\ l'argument\ de\ la\ commande.\ \r\n\ La\ m\u00E9thode\ utilise\ la\ classe\ StringTokenizer\ pour\ s\u00E9parer\ la\ cha\u00EEne\ d'entr\u00E9e\ en\ diff\u00E9rents\ jetons,\ qui\ sont\ ensuite\ utilis\u00E9s\ pour\ cr\u00E9er\ un\ objet\ Command.\ \r\n\ Si\ la\ commande\ est\ valide,\ un\ objet\ Command\ contenant\ les\ deux\ parties\ est\ renvoy\u00E9.\ \r\n\ Sinon,\ un\ objet\ Command\ avec\ la\ premi\u00E8re\ partie\ de\ la\ commande\ d\u00E9finie\ \u00E0\ null\ est\ renvoy\u00E9.\r\n
comment3.params=
comment3.target=java.lang.String\ getCommands()
comment3.text=\r\n\ \ Cette\ m\u00E9thode\ renvoie\ la\ liste\ de\ commandes\ valides\ stock\u00E9e\ dans\ l'objet\ CommandWords\ initialis\u00E9\ dans\ le\ constructeur.\r\n
numComments=4
